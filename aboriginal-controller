#!/bin/bash

SB_WORKDIR=
SB_VERBOSE=false
SB_QUIT=false
SB_EXECUTE=false
SB_BOOTSTRAP=false
SB_ASSUME_RUNNING=false
SB_DIRECTORY=
SB_COMMAND=
SB_EXITSTATUS=0

# The command sequence we're gonna send
SB_COMMAND_SEQUENCE=()

#####################################################
#          Usage and command line parsing           #
#####################################################
function usage () {
    echo "Usage: "
    echo "  aboriginal-controller [OPTIONS] [<commands>]"
    echo
    echo "Control script to interact with a running aboriginal emulator"
    echo
    echo "General Options:"
    echo "  -h --help                Display this help message and exit"
    echo "  -w --workdir <directory> Directory where emulator state is stored"
    echo "  -a --assume-running      Dont check for the running pid, which is not set in interactive mode"
    echo "  -v --verbose             Be verbose"
    echo
    echo "Main control options:"
    echo "  -x --execute             Executes some <commands> in a sandboxed directory, this script will"
    echo "                           block while the command is processed and the exit status of the"
    echo "                           processed command will be propagated as the exit status of this script."
    echo "  -q --quit                Instructs the emulator to shutdown."
    echo
    echo "Additional options to use with --execute"
    echo "  -d --directory  <path>   Directory to run the sandbox in, relative to the directory shared with the emulator."
    echo "  -b --bootstrap           Whether the sandbox should be run in bootstrap mode, bootstrap"
    echo "                           mode indicates that there is no base libc or gcc runtime libraries"
    echo "                           staged in the sandbox directory and that the compiler should use"
    echo "                           the default aboriginal runtimes."
    echo
}

while : ; do
    case "$1" in
	-h|--help)
	    usage;
	    exit 0;
	    shift ;;

	-w|--workdir)
	    SB_WORKDIR=${2};
	    shift 2 ;;

	-v|--verbose)
	    SB_VERBOSE=true;
	    shift ;;

	-a|--assume-running)
	    SB_ASSUME_RUNNING=true;
	    shift ;;

	-x|--execute)
	    SB_EXECUTE=true;
	    shift ;;

	-q|--quit)
	    SB_QUIT=true;
	    shift ;;

	-d|--directory)
	    SB_DIRECTORY=${2};
	    shift 2 ;;

	-b|--bootstrap)
	    SB_BOOTSTRAP=true;
	    shift ;;

	*)
	    break ;;
    esac
done

SB_COMMAND=("$@")

# Source the common protocol definition and work directory state
#
SB_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
. ${SB_PATH}/aboriginal-state
. ${SB_PATH}/control/bin/protocol
. ${SB_PATH}/control/bin/protocol-functions.sh

#####################################################
#                   Utilities                       #
#####################################################
function handshake() {
    local tries=0
    local shook=false
    local readAck="z"

    printVerbose "Performing handshake"
    while [ "${tries}" -lt 3 ]; do

	status=$(sendAndWait ${SB_PROTO_HANDSHAKE})
	if [ "${status}" -eq 0 ]; then
	  shook=true;
	  break
	fi
	sleep ${SB_WAIT_SEND}

	let tries=${tries}+1;
    done

    if ! $shook; then
	printStderr "Unable to perform handshake"
	exit 1
    else
	printVerbose "Successful handshake after ${tries} tries"
    fi
}

#####################################################
#                     Main                          #
#####################################################
if ! $SB_QUIT && ! $SB_EXECUTE; then
    printStderr "Must specify either the --quit or --execute options"
    printStderr
    usage
    exit 1;
fi

if [ -z "${SB_WORKDIR}" ]; then
    printStderr "Must specify the directory where runtime state is stored"
    printStderr
    usage
    exit 1;
elif [ ! -d ${SB_WORKDIR} ]; then
    printStderr "The specified work directory '${SB_WORKDIR}' is not a directory"
    printStderr
    usage
    exit 1;
fi

# Check if we're running
#
if ! $SB_ASSUME_RUNNING; then
    if [ "$(isRunning)" == "0" ]; then
	printStderr "Aboriginal sandbox for work directory ${SB_WORKDIR} is not running";
	exit 1;
    fi
fi

# First perform a handshake, just in case we're out of sync
# for some unexplained reason
handshake

declare -a COMMAND_SEQUENCE

if $SB_QUIT; then
  printVerbose "Instructing the emulator to quit"

  COMMAND_SEQUENCE+=(${SB_PROTO_START})
  COMMAND_SEQUENCE+=(${SB_PROTO_EXIT})
  COMMAND_SEQUENCE+=(${SB_PROTO_END})
  status=$(sendSequence)
  if [ "${status}" -ne 0 ]; then
      printStderr "Failed to instruct emulator to quit"
      exit 1
  fi

  # Currently no way to join the emulator process and wait,
  # just return immediately and expect the emulator to exit
  exit 0
else
  printVerbose "Sending commands to the emulator"

  COMMAND_SEQUENCE+=(${SB_PROTO_START})
  COMMAND_SEQUENCE+=("${SB_PROTO_SANDBOX} ${SB_DIRECTORY}")
  COMMAND_SEQUENCE+=("${SB_PROTO_COMMAND} ${SB_COMMAND[@]}")
  if $SB_BOOTSTRAP; then
    COMMAND_SEQUENCE+=(${SB_PROTO_BOOTSTRAP})
  fi
  COMMAND_SEQUENCE+=(${SB_PROTO_END})
  status=$(sendSequence)
  if [ "${status}" -ne 0 ]; then
      printStderr "Failed to send commands to the emulator"
      exit 1
  fi

  printVerbose "Waiting for commands to complete"
  read -r SB_EXITSTATUS < ${COMM_IN};
  echo "${SB_PROTO_ACK}" > ${COMM_OUT}

  printVerbose "Emulator reported exit status: ${SB_EXITSTATUS}"
  exit ${SB_EXITSTATUS}
fi
