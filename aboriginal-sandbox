#!/bin/bash

SB_IMAGE=
SB_DIRECTORY=
SB_VERBOSE=
SB_EMULATOR=
SB_DYNAMIC_LINKER=
SB_TOPDIR=
SB_COMMAND=
SB_EXITSTATUS=0

#####################################################
#          Usage and command line parsing           #
#####################################################
function usage () {
    echo "Usage: "
    echo "  aboriginal-sandbox [OPTIONS] <command>"
    echo
    echo "Creates and runs sandbox at the specified directory"
    echo
    echo "Runs the commands inside an aboriginal chroot environment. If no commands"
    echo "are specified then simply runs a shell."
    echo
    echo "If successfull in launching the aboriginal chroot, this script will propagate the"
    echo "exit status of chroot. Otherwise, if an error occurs while setting up"
    echo "the sandbox this script will exit with error code 1."
    echo
    echo "General Options:"
    echo "  -h --help                      Display this help message and exit"
    echo "  -e --emulator       <path>     Directory of the aboriginal system image"
    echo "  -i --image          <path>     Image file containing the staged build sandbox"
    echo "  -d --directory      <path>     Directory holding the staged sandbox"
    echo "  -v --verbose                   Be verbose"
    echo
    echo "Compiler control options:"
    echo "  -l --dynamic-linker <path>     Path to the dynamic linker (ld.so)"
    echo "  -t --topdir         <path>     Base directory for base include/link paths"
    echo
}

while : ; do
    case "$1" in 
	-h|--help)
	    usage;
	    exit 0;
	    shift ;;

	-l|--dynamic-linker)
	    SB_DYNAMIC_LINKER=${2};
	    shift 2 ;;

	-t|--topdir)
	    SB_TOPDIR=${2};
	    shift 2 ;;

	-i|--image)
	    SB_IMAGE=${2};
	    shift 2 ;;

	-d|--directory)
	    SB_DIRECTORY=${2};
	    shift 2 ;;

	-e|--emulator)
	    SB_EMULATOR=${2};
	    shift 2 ;;

	-v|--verbose)
	    SB_VERBOSE=1;
	    shift ;;

	*)
	    break ;;
    esac
done

SB_COMMAND="$@"

#####################################################
#                      Main                         #
#####################################################
SB_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONTROL_IMAGE="$SB_PATH/control.sqf"

if [ ! -f ${CONTROL_IMAGE} ]; then
  echo "Control image could not be found at '${CONTROL_IMAGE}'"
  exit 1;
fi

if [ -z "${SB_IMAGE}" ]; then
  echo "Must specify the image containing the staging directory"
  exit 1;  
elif [ ! -f ${SB_IMAGE} ]; then
  echo "The specified image '${SB_IMAGE}' is not a file"
  exit 1;
fi

if [ -z "${SB_DIRECTORY}" ]; then
  echo "Must specify the staging directory in the image"
  exit 1;
fi

if [ -z "${SB_EMULATOR}" ]; then
  echo "Must specify the aboriginal emulator directory"
  exit 1;
elif [ ! -d ${SB_EMULATOR} ]; then
  echo "The specified emulator '${SB_EMULATOR}' is not a directory"
  exit 1;
fi

HDC=$(realpath ${CONTROL_IMAGE})
HDB=$(realpath ${SB_IMAGE})
EMULATOR_DIR=$(realpath ${SB_EMULATOR})
KERNEL_EXTRA="STAGING=${SB_DIRECTORY} DYNAMIC_LINKER=${SB_DYNAMIC_LINKER} TOPDIR=${SB_TOPDIR} COMMAND=\"${SB_COMMAND}\""
BUILD_PAUSE=0

export HDB HDC KERNEL_EXTRA BUILD_PAUSE

cd ${EMULATOR_DIR}

echo "HDB: $HDB"
echo "HDC: $HDC"
echo "KERNEL_EXTRA: $KERNEL_EXTRA"
echo "CWD: $(pwd)"

./dev-environment.sh

#
# Collect the exit status...
#
# currently this requires sudo, but as a temporary measure
# until we get the IPC and nfs share up and running.
#
tmpdir=$(mktemp -d)
sudo mount ${HDB} ${tmpdir}

SB_EXITSTATUS=$(cat ${tmpdir}/${SB_DIRECTORY}/exit_status)
sudo umount ${tmpdir}
rmdir ${tmpdir}

exit ${SB_EXITSTATUS}
