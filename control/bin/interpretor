#!/bin/bash
#
# Interprets commands over the serial ports
#
BASE=/mnt
SANDBOX=${BASE}/bin/sandbox
COMM_IN="/dev/vport1p1"
COMM_OUT="/dev/vport1p2"
SB_VERBOSE=true

# Source the protocol definition
. ${BASE}/bin/protocol
. ${BASE}/bin/protocol-functions.sh

# The command sequence we're gonna send,
# need to declare the array in global scope
SB_COMMAND_SEQUENCE=()

#
# Parsing state
#
parse_processing=false
parse_command=

#
# Parsed sandbox command
#
sb_command=
sb_bootstrap=false
sb_sandbox=

function clearState() {
    parse_processing=false
    parse_command=
    
    sb_command=
    sb_sandbox=
    sb_bootstrap=false
    sb_end_reached=false
}

function readMessage() {

    while true; do

	# Synchronize communications with an ACK for every line
	#
	read -r word arg < ${COMM_IN}
	printVerbose "Read: ${word} ${arg}";

	# Send the ACK right away
	sendAck

	case ${word} in

	    ${SB_PROTO_START})
		if $parse_processing; then
		  clearState;
		fi
		parse_processing=true;
		;;

	    ${SB_PROTO_END})
		sb_end_reached=true;
		;;

	    ${SB_PROTO_EXIT})
		parse_command=${SB_PROTO_EXIT};
		;;

	    ${SB_PROTO_SANDBOX})
		parse_command=${SB_PROTO_SANDBOX};
		sb_sandbox=${arg}
		;;

	    ${SB_PROTO_BOOTSTRAP})
		sb_bootstrap=true;
		;;

	    ${SB_PROTO_COMMAND})
		sb_command=("${arg}");
		;;

	esac

	# Break the loop once we receive an "END", after
	# writing the ACK back to the host.
	#
	if $sb_end_reached; then
	  return;
	fi

    done
}

function runSandbox() {

    local sb_args="";
    local sb_exit_status="0";
    local status=0;

    if ! $sb_bootstrap; then
      sb_args=${sb_args}"--dynamic-linker /lib/ld.so ";
      sb_args=${sb_args}"--topdir /usr ";
      sb_args=${sb_args}"--extra-libdirs /lib ";
    fi

    sb_args=${sb_args}"--directory ${SHARE}/${sb_sandbox}"

    # Mount the share for the duration of the command
    printVerbose "Mounting ${SHARE}"
    mount -t 9p share ${SHARE}

    # Run the sandbox with the specified commands
    printVerbose "Running: ${SANDBOX} ${sb_args} ${sb_command[0]}"
    ${SANDBOX} ${sb_args} "${sb_command[0]}"
    sb_exit_status=$?

    # Umount it, only mounted while running commands
    printVerbose "Unmounting ${SHARE}"
    umount ${SHARE}

    # Report the return value to be written back to the host,
    # expect and ACK and do some retries here too.
    COMMAND_SEQUENCE=("${sb_exit_status}")
    status=$(sendSequence)
    if [ "${status}" -ne 0 ]; then

	# If we get here, better to just exit the script, this
	# will cause the system to shut down and the emulator to quit
	printStderr "We're totally screwed now, probably locked up"
	exit 1
    fi
}

function processMessage() {

    case ${parse_command} in
	${SB_PROTO_EXIT})
	    exit 0;
	    ;;
	${SB_PROTO_SANDBOX})
	    runSandbox;
	    ;;
    esac
}

#
# Indicate we are ready for processing, if we're launched in
# the background.
#
if [ ! -z "${INFORM_READY}" ]; then
    echo ${SB_PROTO_READY} > ${COMM_OUT}
fi

#
# Main parsing loop
#
while true; do
    readMessage;
    processMessage;
    clearState;
done
