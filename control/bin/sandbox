#!/bin/bash

SB_BASE=
SB_VERBOSE=
SB_DYNAMIC_LINKER="/tools/usr/lib/ld-musl.so.0"
SB_TOPDIR="/tools/usr"
SB_LIBDIRS=
SB_PREDEF=
SB_COMMAND=
SB_EXITSTATUS=0

# Directories to create in the sandbox
SB_BASEDIRS="
    proc
    sys
    dev
    tmp
    etc
    bin
    sbin
    home
    tools
    usr/bin
    usr/sbin
"

# Array of bind mounts (source and dest)
SB_BIND_MOUNT_TMP=$(mktemp -d)
SB_BIND_MOUNT_SRC=("${SB_BIND_MOUNT_TMP}" "/proc" "/sys" "/usr/overlay")
SB_BIND_MOUNT_DEST=("/tmp" "/proc" "/sys" "/tools")


# Paths when in the sandbox, we use arrays so
# we can easily walk it before running the sandbox
SB_BASE_PATH=("/usr/bin" "/bin" "/usr/sbin" "/sbin")
SB_TOOL_PATH=("/tools/usr/distcc" "/tools/usr/bin")

# Static execs we'll want to use in the sandbox
SB_EXECS="toybox busybox bash make"

#####################################################
#          Usage and command line parsing           #
#####################################################
function usage () {
    echo "Usage: "
    echo "  sandbox [OPTIONS] <command>"
    echo
    echo "Creates and runs sandbox at the specified staging directory"
    echo
    echo "Runs the command inside the chroot if any was specified, otherwise"
    echo "will just run a shell inside the chroot."
    echo
    echo "If successfull in launching the chroot, this script will propagate the"
    echo "exit status of chroot. Otherwise, if an error occurs while setting up"
    echo "the sandbox this script will exit with error code 1."
    echo
    echo "General Options:"
    echo "  -h --help                      Display this help message and exit"
    echo "  -d --directory      <path>     Directory to run the sandbox in"
    echo "  -v --verbose                   Be verbose"
    echo
    echo "Compiler control options:"
    echo "  -l --dynamic-linker <path>     Path to the dynamic linker (ld.so)"
    echo "  -t --topdir         <path>     Base directory for base include/link paths"
    echo "  -e --extra-libdirs  <path>     A colon separated path of default library search paths"
    echo "  -p --predef         <filename> An optional predef file for compiling against libc (e.g.: stdc-predef.h)"
    echo
}

while : ; do
    case "$1" in 
	-h|--help)
	    usage;
	    exit 0;
	    shift ;;

	-l|--dynamic-linker)
	    SB_DYNAMIC_LINKER=${2};
	    shift 2 ;;

	-t|--topdir)
	    SB_TOPDIR=${2};
	    shift 2 ;;

	-e|--extra-libdirs)
	    SB_LIBDIRS=${2};
	    shift 2 ;;

	-p|--predef)
	    SB_PREDEF=${2};
	    shift 2 ;;

	-d|--directory)
	    SB_BASE=${2};
	    shift 2 ;;

	-v|--verbose)
	    SB_VERBOSE=1;
	    shift ;;

	*)
	    break ;;
    esac
done

SB_COMMAND=("$@")

#
# Assert the base directory
#
if [ -z "${SB_BASE}" ]; then
    echo "Must specify a base directory"
    echo
    usage
    exit 1
elif [ ! -d "${SB_BASE}" ]; then
    echo "Base directory '${SB_BASE}' is not a directory"
    echo
    usage
    exit 1
fi

#
# Assert the executables
#
for executable in ${SB_EXECS}; do
    if [ ! -x $(which ${executable}) ]; then
	echo "No executable '${executable}' found"
	echo
	usage
	exit 1
    fi
done

#####################################################
#                    Utilities                      #
#####################################################
function printStderr() {
    echo "$@" 1>&2;
}

function printVerbose() {
    if [ ! -z "${SB_VERBOSE}" ]; then
	printStderr $@
    fi
}

function dienow() {
    local message=$1

    if [ ! -z "${message}" ]; then
	echo -n "${message}"
    else
	echo -n "An error occurred"
    fi

    echo "... exiting"
    exit 1
}

# Check if program ${1} exists in the base staging paths
function checkExists {
    local file=$1

    for dir in "${SB_BASE_PATH[@]}"; do
	fullpath="${SB_BASE}/${dir}/${file}"
	if [ -e "${fullpath}" ]; then
	    echo "yes"
	    return
	fi
    done

    echo "no";
}

function linkIfNeeded() {
    local target=$1
    local link_name=$2
    local link_base=$(basename ${link_name})

    if [ $(checkExists ${link_base}) == "no" ]; then
	printVerbose "Installing '${link_name}'"

	ln -s ${target} ${link_name}
	if [ "$?" -ne "0" ]; then
	    dienow "Error installing ${link_name}"
	fi
    else
	printVerbose "Not installing '${link_name}', already exists"
    fi
}

function copyIfNeeded() {
    local src=$1
    local target=$2

    if [ ! -e ${target} ]; then
	printVerbose "Installing '${target}'"

	cp ${src} ${target}
	if [ "$?" -ne "0" ]; then
	    dienow "Error installing ${target}"
	fi
    else
	printVerbose "Not installing '${target}', already exists"
    fi
}

function inList() {
    local word=$1
    local list=$2

    for iter in ${list}; do
	if [ "$iter" == "$word" ]; then
	    echo "yes"
	    return
	fi
    done

    echo "no"
}

function joinPath {
    local IFS=":";
    echo "$*";
}

function createDirectories() {
    for dir in ${SB_BASEDIRS}; do
	printVerbose "Creating ${dir}"
	mkdir -p ${SB_BASE}/${dir}
    done
}

function installPayload() {

    # Install bash if there is none
    if [ $(checkExists "bash") == "no" ]; then
	copyIfNeeded $(which "bash") ${SB_BASE}/bin/bash

	linkIfNeeded /bin/bash ${SB_BASE}/bin/sh
    fi

    # Install busybox & toybox ONLY if there is not already a busybox
    if [ $(checkExists "busybox") == "no" ]; then

	copyIfNeeded $(which "busybox") ${SB_BASE}/bin/busybox
	copyIfNeeded $(which "toybox") ${SB_BASE}/bin/toybox

	# Install toybox programs as symlinks
	local SB_TOYBOX=$(which toybox)
	local SB_TOYBOX_PROGS=$( ${SB_TOYBOX} --long )
	for toy in ${SB_TOYBOX_PROGS}; do
	    linkIfNeeded /bin/toybox ${SB_BASE}/${toy}
	done

	# Install busybox programs as symlinks, where toybox has not
	local SB_BUSYBOX=$(which busybox)
	local SB_BUSYBOX_PROGS=$( ${SB_BUSYBOX} --list )
	SB_TOYBOX_PROGS=$( ${SB_TOYBOX} )

	for prog in ${SB_BUSYBOX_PROGS}; do

	    # Toybox installs things in smart places, here we
	    # only want to install busybox programs if they
	    # are not in the list of installed toybox programs.
	    #
	    if test $(inList "${prog}" "${SB_TOYBOX_PROGS}") == "no"; then
		linkIfNeeded /bin/busybox ${SB_BASE}/bin/${prog}
	    fi
	done
    fi
}

function mountDirectories() {
    local i=0;
    
    for mountsrc in ${SB_BIND_MOUNT_SRC[@]}; do
	mountdest=${SB_BIND_MOUNT_DEST[i]};

	printVerbose "Mounting ${mountsrc} at ${SB_BASE}/${mountdest}"
	mount --bind ${mountsrc} ${SB_BASE}/${mountdest}

	let i=i+1;
    done


}

function umountDirectories() {
    for mountdest in ${SB_BIND_MOUNT_DEST[@]}; do

	printVerbose "Unmounting ${SB_BASE}/${mountdest}"
	umount ${SB_BASE}/${mountdest}
    done

    printVerbose "Removing ${SB_BIND_MOUNT_TMP}"
    rm -rf ${SB_BIND_MOUNT_TMP}
}

function createBaseMeta() {

    if [ ! -f "${SB_BASE}/etc/passwd" ]; then
        printVerbose "Creating ${SB_BASE}/etc/passwd"
	cat > "${SB_BASE}/etc/passwd" << EOF
root:x:0:0:Super user:/root:/bin/sh
EOF
    fi

    if [ ! -f "${SB_BASE}/etc/group" ]; then
        printVerbose "Creating ${SB_BASE}/etc/group"
	cat > "${SB_BASE}/etc/group" << EOF
root:x:0:root
EOF
    fi

    if [ ! -f "${SB_BASE}/etc/shadow" ]; then
        printVerbose "Creating ${SB_BASE}/etc/shadow"
	cat > "${SB_BASE}/etc/shadow" << EOF
root::::::::
EOF
    fi
}

function launchChroot() {

    printVerbose "Running command in sandbox: ${SB_COMMAND[@]}"

    ALL_PATHS=(${SB_BASE_PATH[@]} ${SB_TOOL_PATH[@]})
    CHROOT_PATH=$(joinPath "${ALL_PATHS[@]}")

    if [ ! -z "${SB_PREDEF}" ]; then
	export CCWRAP_PREDEF=${SB_PREDEF}
    fi

    if [ ! -z "${SB_DYNAMIC_LINKER}" ]; then
	export CCWRAP_DYNAMIC_LINKER=${SB_DYNAMIC_LINKER}
    fi

    if [ ! -z "${SB_TOPDIR}" ]; then
	export CCWRAP_TOPDIR=${SB_TOPDIR}
    fi

    if [ ! -z "${SB_LIBDIRS}" ]; then
	export CCWRAP_EXTRA_LIBDIRS=${SB_LIBDIRS}
    fi

    # Launch the chroot with the compiler and path configured
    PATH=${CHROOT_PATH} chroot ${SB_BASE} /bin/bash -c "${SB_COMMAND[@]}"

    # Capture the chroot exit status
    SB_EXITSTATUS=$?
}

#####################################################
#                      Main                         #
#####################################################

#
# Setup base directories
#
createDirectories

#
# Setup some basic medatada
#
createBaseMeta

#
# Install statically linked executables if need be
#
installPayload

#
# Bind mount some directories
#
mountDirectories

#
# Launch the chroot
#
launchChroot

#
# Unmount bind mounted directories
#
umountDirectories

#
# Propagate the exit status
#
exit ${SB_EXITSTATUS}
